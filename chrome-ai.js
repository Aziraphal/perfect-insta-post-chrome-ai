// Chrome Built-in AI Integration for Perfect Insta Post
// Utilise Prompt API, Writer API, et Rewriter API avec fallback vers backend

class ChromeAIManager {
    constructor() {
        this.capabilities = {
            promptAPI: false,
            writerAPI: false,
            rewriterAPI: false
        };
        this.sessions = {
            prompt: null,
            writer: null,
            rewriter: null
        };
        this.initializeCapabilities();
    }

    // V√©rifier les capacit√©s AI disponibles
    async initializeCapabilities() {
        try {
            // V√©rifier Prompt API (pour analyse d'images)
            if (typeof window !== 'undefined' && 'ai' in window && 'languageModel' in window.ai) {
                const availability = await window.ai.languageModel.capabilities();
                this.capabilities.promptAPI = availability.available === 'readily';
                console.log('ü§ñ Prompt API disponible:', this.capabilities.promptAPI);
            }

            // V√©rifier Writer API
            if (typeof window !== 'undefined' && 'ai' in window && 'writer' in window.ai) {
                const availability = await window.ai.writer.capabilities();
                this.capabilities.writerAPI = availability.available === 'readily';
                console.log('‚úçÔ∏è Writer API disponible:', this.capabilities.writerAPI);
            }

            // V√©rifier Rewriter API
            if (typeof window !== 'undefined' && 'ai' in window && 'rewriter' in window.ai) {
                const availability = await window.ai.rewriter.capabilities();
                this.capabilities.rewriterAPI = availability.available === 'readily';
                console.log('üîÑ Rewriter API disponible:', this.capabilities.rewriterAPI);
            }

        } catch (error) {
            console.log('‚ö†Ô∏è APIs Chrome AI non disponibles:', error);
        }
    }

    // Analyser une image avec Prompt API (multimodal)
    async analyzeImage(imageFile, context = {}) {
        if (!this.capabilities.promptAPI) {
            console.log('üì° Fallback: utilisation de l\'API backend pour l\'analyse d\'image');
            return this.fallbackToBackend('analyze', { imageFile, context });
        }

        try {
            // Cr√©er une session avec support multimodal
            if (!this.sessions.prompt) {
                this.sessions.prompt = await window.ai.languageModel.create({
                    systemPrompt: `Tu es un expert en analyse d'images pour Instagram.
                    Analyse les images et identifie le contenu, l'ambiance, les objets, les personnes,
                    les couleurs dominantes, et le style pour cr√©er des posts Instagram engageants.`,
                    expectedInputs: [{ type: 'image' }]
                });
            }

            // Construire le prompt d'analyse
            const analysisPrompt = this.buildImageAnalysisPrompt(context);

            // Envoyer l'image et le prompt
            const result = await this.sessions.prompt.prompt(analysisPrompt, {
                image: imageFile
            });

            return this.parseImageAnalysis(result);

        } catch (error) {
            console.error('‚ùå Erreur Prompt API:', error);
            return this.fallbackToBackend('analyze', { imageFile, context });
        }
    }

    // G√©n√©rer une l√©gende avec Writer API
    async generateCaption(imageAnalysis, options = {}) {
        if (!this.capabilities.writerAPI) {
            console.log('üì° Fallback: utilisation de l\'API backend pour la g√©n√©ration');
            return this.fallbackToBackend('generate', { imageAnalysis, options });
        }

        try {
            // Cr√©er une session Writer
            if (!this.sessions.writer) {
                this.sessions.writer = await window.ai.writer.create({
                    tone: options.tone || 'casual',
                    format: 'plain-text',
                    length: options.captionLength || 'medium'
                });
            }

            // Construire le prompt de g√©n√©ration
            const generationPrompt = this.buildCaptionPrompt(imageAnalysis, options);

            // G√©n√©rer la l√©gende
            const result = await this.sessions.writer.write(generationPrompt);

            return this.parseCaptionResult(result, imageAnalysis, options);

        } catch (error) {
            console.error('‚ùå Erreur Writer API:', error);
            return this.fallbackToBackend('generate', { imageAnalysis, options });
        }
    }

    // R√©√©crire une l√©gende avec Rewriter API
    async rewriteCaption(originalCaption, style = 'more-engaging') {
        if (!this.capabilities.rewriterAPI) {
            console.log('üì° Fallback: utilisation de l\'API backend pour la r√©√©criture');
            return this.fallbackToBackend('rewrite', { originalCaption, style });
        }

        try {
            // Cr√©er une session Rewriter
            if (!this.sessions.rewriter) {
                this.sessions.rewriter = await window.ai.rewriter.create({
                    tone: 'casual',
                    format: 'plain-text'
                });
            }

            // R√©√©crire selon le style demand√©
            const rewriteContext = this.getRewriteContext(style);
            const result = await this.sessions.rewriter.rewrite(
                originalCaption,
                { context: rewriteContext }
            );

            return {
                success: true,
                content: result,
                source: 'chrome-ai',
                style: style
            };

        } catch (error) {
            console.error('‚ùå Erreur Rewriter API:', error);
            return this.fallbackToBackend('rewrite', { originalCaption, style });
        }
    }

    // Construire le prompt d'analyse d'image
    buildImageAnalysisPrompt(context) {
        const { postType, location, situation } = context;

        return `Analyse cette image pour un post Instagram ${postType || 'lifestyle'}.
        ${location ? `Lieu: ${location}` : ''}
        ${situation ? `Contexte: ${situation}` : ''}

        Identifie:
        1. Le contenu principal (objets, personnes, activit√©s)
        2. L'ambiance et l'√©motion
        3. Les couleurs dominantes
        4. Le style photographique
        5. Les √©l√©ments remarquables
        6. Les hashtags pertinents possibles

        R√©ponds en JSON avec ces informations structur√©es.`;
    }

    // Construire le prompt de g√©n√©ration de l√©gende
    buildCaptionPrompt(imageAnalysis, options) {
        const { tone, postType, captionStyle, location, context: situation } = options;

        return `Cr√©e une l√©gende Instagram engageante bas√©e sur cette analyse d'image:
        ${JSON.stringify(imageAnalysis, null, 2)}

        Param√®tres:
        - Type: ${postType || 'lifestyle'}
        - Ton: ${tone || 'd√©contract√©'}
        - Style: ${captionStyle || 'engageant'}
        ${location ? `- Lieu: ${location}` : ''}
        ${situation ? `- Contexte: ${situation}` : ''}

        La l√©gende doit:
        - √ätre authentique et engageante
        - Inclure un appel √† l'action subtil
        - √ätre adapt√©e au contenu de l'image
        - Respecter le ton et le style demand√©s

        G√©n√®re uniquement le texte de la l√©gende, sans hashtags.`;
    }

    // Parser le r√©sultat de l'analyse d'image
    parseImageAnalysis(result) {
        try {
            // Essayer de parser en JSON
            const parsed = JSON.parse(result);
            return {
                success: true,
                analysis: parsed,
                source: 'chrome-ai'
            };
        } catch {
            // Si pas JSON, parser le texte
            return {
                success: true,
                analysis: {
                    content: result,
                    mainSubject: 'Contenu d√©tect√©',
                    mood: 'Positive',
                    colors: ['Vari√©es'],
                    style: 'Naturel'
                },
                source: 'chrome-ai'
            };
        }
    }

    // Parser le r√©sultat de g√©n√©ration de l√©gende
    parseCaptionResult(result, imageAnalysis, options) {
        // G√©n√©rer des hashtags basiques bas√©s sur l'analyse
        const hashtags = this.generateHashtags(imageAnalysis, options);

        return {
            success: true,
            caption: result.trim(),
            hashtags: hashtags,
            suggestions: [
                'Essayez de varier le style avec le bouton de r√©√©criture',
                'Ajoutez votre touche personnelle',
                'Pensez √† adapter selon votre audience'
            ],
            source: 'chrome-ai'
        };
    }

    // G√©n√©rer des hashtags basiques
    generateHashtags(imageAnalysis, options) {
        const baseHashtags = ['#instagram', '#photography'];

        if (options.postType) {
            switch (options.postType) {
                case 'food':
                    baseHashtags.push('#food', '#foodie', '#delicious');
                    break;
                case 'travel':
                    baseHashtags.push('#travel', '#adventure', '#explore');
                    break;
                case 'fashion':
                    baseHashtags.push('#fashion', '#style', '#ootd');
                    break;
                case 'lifestyle':
                    baseHashtags.push('#lifestyle', '#daily', '#moments');
                    break;
                default:
                    baseHashtags.push('#life', '#moments');
            }
        }

        if (options.location) {
            // Ajouter des hashtags de localisation basiques
            const locationTag = options.location.toLowerCase().replace(/\s+/g, '');
            baseHashtags.push(`#${locationTag}`);
        }

        return baseHashtags.slice(0, 10); // Limiter √† 10 hashtags
    }

    // Obtenir le contexte de r√©√©criture
    getRewriteContext(style) {
        const contexts = {
            'more-engaging': 'Rend ce texte plus engageant et accrocheur',
            'professional': 'Reformule dans un ton plus professionnel',
            'casual': 'Simplifie et rend plus d√©contract√©',
            'creative': 'Ajoute plus de cr√©ativit√© et d\'originalit√©',
            'shorter': 'Raccourcis tout en gardant l\'essentiel',
            'longer': 'D√©veloppe et enrichis le contenu'
        };
        return contexts[style] || contexts['more-engaging'];
    }

    // Fallback vers l'API backend
    async fallbackToBackend(action, data) {
        console.log(`üì° Utilisation de l'API backend pour: ${action}`);

        // Cette fonction sera appel√©e par le syst√®me existant
        // Retourner un format coh√©rent pour indiquer le fallback
        return {
            success: true,
            requiresBackend: true,
            action: action,
            data: data,
            source: 'backend-required'
        };
    }

    // Nettoyer les sessions
    async cleanup() {
        try {
            if (this.sessions.prompt) {
                await this.sessions.prompt.destroy();
                this.sessions.prompt = null;
            }
            if (this.sessions.writer) {
                await this.sessions.writer.destroy();
                this.sessions.writer = null;
            }
            if (this.sessions.rewriter) {
                await this.sessions.rewriter.destroy();
                this.sessions.rewriter = null;
            }
        } catch (error) {
            console.error('Erreur lors du nettoyage:', error);
        }
    }

    // V√©rifier si au moins une API est disponible
    hasAnyCapability() {
        return Object.values(this.capabilities).some(Boolean);
    }

    // Obtenir le statut des capacit√©s
    getCapabilitiesStatus() {
        return {
            ...this.capabilities,
            hasAny: this.hasAnyCapability()
        };
    }
}

// Initialiser le manager AI
if (typeof window !== 'undefined') {
    window.chromeAI = new ChromeAIManager();

    // Nettoyer au d√©chargement de la page
    window.addEventListener('beforeunload', () => {
        if (window.chromeAI) {
            window.chromeAI.cleanup();
        }
    });
}

// Export pour utilisation dans d'autres modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ChromeAIManager;
}